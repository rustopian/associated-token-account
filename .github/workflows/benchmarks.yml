name: P-ATA Benchmarks

on:
  push:
    paths:
      - 'p-ata/**'
      - 'program/**'
      - '.github/workflows/benchmarks.yml'
    branches: [main, p-ata, p-ata-dev]

env:
  RUST_BACKTRACE: 1

jobs:
  run_benchmarks:
    name: Run P-ATA Benchmarks
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Setup Environment
        uses: ./.github/actions/setup
        with:
          cargo-cache-key: cargo-benchmarks
          solana: true

      - name: Build Programs
        id: build-programs
        run: |
          cd p-ata
          cargo build --features build-programs
          echo "âœ… Programs built successfully"

      - name: Run Benchmarks
        run: |
          cd p-ata
          
          # Create output directory
          mkdir -p benchmark_results
          
          # Run comparison benchmarks and capture output while showing it
          echo "ðŸš€ Running P-ATA vs Original ATA Comparison Benchmarks"
          cargo bench --features build-programs ata_instruction_benches 2>&1 | tee benchmark_results/comparison.log
          
          # Run failure scenarios
          echo "ðŸ§ª Running Failure Scenario Tests"  
          cargo bench --features build-programs failure_scenarios 2>&1 | tee benchmark_results/failures.log
          
          cd ..

      - name: Generate Badge Data
        run: |
          cd p-ata
          
          # Install jq for JSON processing
          sudo apt-get update && sudo apt-get install -y jq bc
          
          # Generate badges from existing benchmark results
          source scripts/run_local_benchmarks.sh
          generate_badges_only

      - name: Update README with Results
        if: github.ref == 'refs/heads/main'
        run: |
          cd p-ata
          
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Check if README.md was updated
          if git diff --quiet README.md; then
            echo "No changes to README.md"
          else
            echo "README.md updated with new badges"
            git add README.md
            git commit -m "Update README with benchmark badges - $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            git push origin HEAD
          fi 