searchState.loadedDescShard("pinocchio_system", 0, "The const program ID.\nReturns <code>true</code> if given pubkey is the program ID.\nReturns the program ID.\nConsumes a stored nonce, replacing it with a successor.\nAllocate space in a (possibly new) account without funding.\nAllocate space for and assign an account at an address …\nAssign account to a program\nAssign account to a program based on a seed.\nChange the entity authorized to execute nonce instructions …\nCreate a new account.\nCreate a new account at an address derived from a base …\nDrive state of Uninitialized nonce account to Initialized, …\nTransfer lamports.\nTransfer lamports from a derived address.\nOne-time idempotent upgrade of legacy nonce versions in …\nWithdraw funds from a nonce account.\nNonce account.\nAccount to be assigned.\nAllocated account.\nAccount to be assigned.\nAllocated account.\nNonce account.\nNonce account.\nNonce account.\nNonce account.\nNonce authority.\nNonce authority.\nLamports to withdraw.\nNonce authority.\nBase account.\nBase account.\nBase account.\nBase account.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFunding account.\nFunding account.\nFunding account.\nFunding account.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of lamports to transfer to the new account.\nNumber of lamports to transfer to the new account.\nAmount of lamports to transfer.\nAmount of lamports to transfer.\nLamports to withdraw.\nNew entity authorized to execute nonce instructions on the …\nAddress of program that will own the new account.\nProgram account to assign as owner.\nAddress of program that will own the new account.\nAddress of program that will own the new account.\nAddress of program that will own the new account.\nAddress of program that will own the new account.\nRecentBlockhashes sysvar.\nRecentBlockhashes sysvar.\nRecentBlockhashes sysvar.\nRecipient account.\nRent sysvar.\nRent sysvar.\nString of ASCII chars, no longer than <code>Pubkey::MAX_SEED_LEN</code>.\nString of ASCII chars, no longer than <code>Pubkey::MAX_SEED_LEN</code>.\nString of ASCII chars, no longer than <code>Pubkey::MAX_SEED_LEN</code>.\nString of ASCII chars, no longer than <code>Pubkey::MAX_SEED_LEN</code>.\nNumber of bytes of memory to allocate.\nNumber of bytes of memory to allocate.\nNumber of bytes of memory to allocate.\nNumber of bytes of memory to allocate.\nNew account.\nNew account.\nRecipient account.\nRecipient account.\nConsumes a stored nonce, replacing it with a successor.\nNonce account.\nNonce authority.\nRecentBlockhashes sysvar.\nAllocate space in a (possibly new) account without funding.\nAccount to be assigned.\nNumber of bytes of memory to allocate.\nAllocate space for and assign an account at an address …\nAllocated account.\nBase account.\nAddress of program that will own the new account.\nString of ASCII chars, no longer than <code>Pubkey::MAX_SEED_LEN</code>.\nNumber of bytes of memory to allocate.\nAssign account to a program\nAccount to be assigned.\nProgram account to assign as owner.\nAssign account to a program based on a seed.\nAllocated account.\nBase account.\nAddress of program that will own the new account.\nString of ASCII chars, no longer than <code>Pubkey::MAX_SEED_LEN</code>.\nChange the entity authorized to execute nonce instructions …\nNonce account.\nNonce authority.\nNew entity authorized to execute nonce instructions on the …\nCreate a new account.\nFunding account.\nNumber of lamports to transfer to the new account.\nAddress of program that will own the new account.\nNumber of bytes of memory to allocate.\nNew account.\nCreate a new account at an address derived from a base …\nBase account.\nFunding account.\nNumber of lamports to transfer to the new account.\nAddress of program that will own the new account.\nString of ASCII chars, no longer than <code>Pubkey::MAX_SEED_LEN</code>.\nNumber of bytes of memory to allocate.\nNew account.\nDrive state of Uninitialized nonce account to Initialized, …\nNonce account.\nLamports to withdraw.\nRecentBlockhashes sysvar.\nRent sysvar.\nTransfer lamports.\nFunding account.\nAmount of lamports to transfer.\nRecipient account.\nTransfer lamports from a derived address.\nBase account.\nFunding account.\nAmount of lamports to transfer.\nAddress of program that will own the new account.\nString of ASCII chars, no longer than <code>Pubkey::MAX_SEED_LEN</code>.\nRecipient account.\nOne-time idempotent upgrade of legacy nonce versions in …\nNonce account.\nWithdraw funds from a nonce account.\nNonce account.\nNonce authority.\nLamports to withdraw.\nRecentBlockhashes sysvar.\nRecipient account.\nRent sysvar.")