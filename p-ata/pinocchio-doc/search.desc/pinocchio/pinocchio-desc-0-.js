searchState.loadedDescShard("pinocchio", 0, "Pinocchio\n<code>assert_eq(core::mem::align_of::&lt;u128&gt;(), 8)</code> is true for …\nContains the error value\nMaximum number of accounts that a transaction may process.\nValue used to indicate that a serialized account is not a …\nContains the success value\nThe result of a program execution.\nReturn value for a successful program execution.\nData structures to represent account information.\nCross-program invocation helpers.\nDefault global allocator.\nDefault panic hook.\nMacros and functions for defining the program entrypoint …\nDeclare the program entrypoint and set up global handlers.\nImplements the <code>Sysvar::get</code> method for both SBF and host …\nInstruction types.\nDeclare the lazy program entrypoint.\nDeclare the lazy program entrypoint.\nLogging utilities for Rust-based Solana programs.\nBasic low-level memory operations.\nPrint a message to the log.\nA global allocator that does not dynamically allocate …\nA global <code>#[panic_handler]</code> for <code>no_std</code> programs.\nDeclare the program entrypoint.\nErrors generated by programs.\nPublic key type and functions.\nConvenience macro for constructing a <code>[Seed; N]</code> array from …\nConvenience macro for constructing a <code>Signer</code> from a list of …\nSyscall functions.\nProvides access to cluster system accounts.\nRaw account data.\nWrapper struct for an <code>Account</code>.\nRepresents masks for borrow state of an account.\nMask to check whether an account is already borrowed.\nMask representing the mutable borrow flag for data.\nBytes to shift to get to the borrow state of data.\nMask to retrieve the original data length.\nMask representing the mutable borrow flag for lamports.\nBytes to shift to get to the borrow state of lamports.\nMaximum number of bytes a program may add to an account …\nMask to check whether an account is already mutably …\nReference to account data or lamports with checked borrow …\nMutable reference to account data or lamports with checked …\nMask to indicate the original data length has been set.\nChanges the owner of the account.\nReturns a read-only reference to the data in the account.\nReturns a read-only reference to the lamports in the …\nIndicates the type of borrow (lamports or data) by …\nReturns a mutable reference to the data in the account.\nReturns a mutable reference to the lamports in the account.\nIndicates the type of borrow (lamports or data) by …\nBorrow state of the account data.\nChecks if it is possible to get a read-only reference to …\nChecks if it is possible to get a read-only reference to …\nChecks if it is possible to get a mutable reference to the …\nChecks if it is possible to get a mutable reference to the …\nChecks if it is possible to get a read-only reference to …\nChecks if it is possible to get a read-only reference to …\nChecks if it is possible to get a mutable reference to the …\nChecks if it is possible to get a mutable reference to the …\nZero out the the account’s data length, lamports and …\nZero out the the account’s data length, lamports and …\nIndicates whether the account data is empty.\nReturns the size of the data in the account.\nLength of the data. Modifiable by programs.\nReturns the memory address of the account data.\nIndicates whether this account represents a program.\nIndicates whether this account represents a program.\nFilters and maps a reference to a new type.\nFilters and maps a mutable reference to a new type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true if the account borrow state is set to the …\nChecks if the account is owned by the given program.\nIndicates whether the transaction was signed by this …\nIndicates whether the transaction was signed by this …\nIndicates whether the account is writable.\nIndicates whether the account is writable.\nPublic key of the account.\nPublic key of the account.\nReturns the lamports in the account.\nThe lamports in the account. Modifiable by programs.\nMaps a reference to a new type.\nMaps a mutable reference to a new type.\nThe <code>value</code> raw pointer is only valid while the <code>&amp;&#39;a T</code> lives …\nThe <code>value</code> raw pointer is only valid while the <code>&amp;&#39;a T</code> lives …\nAccount’s original data length when it was serialized …\nProgram that owns this account.\nProgram that owns this account. Modifiable by programs.\nRaw (pointer to) account data.\nRealloc the account’s data and optionally …\nTries to get a read-only reference to the data field, …\nTries to get a read-only reference to the lamport field, …\nTries to get a mutable reference to the data field, …\nTries to get a read only reference to the lamport field, …\nMaximum number of accounts that can be passed to a …\nMaximum size that can be set using <code>set_return_data</code>.\nStruct to hold the return data from an invoked program.\nReturn the data set by the program.\nReturn data set by the program.\nReturns the argument unchanged.\nGet the return data from an invoked program.\nCalls <code>U::from(self)</code>.\nInvoke a cross-program instruction.\nInvoke a cross-program instruction with signatures.\nInvoke a cross-program instruction with signatures but don…\nInvoke a cross-program instruction but don’t enforce Rust…\nReturns the program that most recently set the return data.\nProgram that most recently set the return data.\nSet the running program’s return data.\nLength of the return data.\nInvoke a cross-program instruction from a slice of …\nInvoke a cross-program instruction with signatures from a …\nContains the error value\nLength of the heap memory region used for program heap.\nStart address of the memory region used for program heap.\nAn allocator that does not allocate memory.\nContains the success value\nThe result of a program execution.\nReturn value for a successful program execution.\nDeserialize the input arguments.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDefines the lazy program entrypoint and the context to …\nAn <code>AccountInfo</code> that is not a duplicate.\nThe index of the original account that was duplicated.\nContext to access data from the input buffer for the …\nWrapper type around an <code>AccountInfo</code> that may be a duplicate.\nExtracts the wrapped <code>AccountInfo</code>.\nReturns the number of available accounts.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPointer to the runtime input buffer for the instruction.\nReturns the instruction data for the instruction.\nReturns the instruction data for the instruction.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>InstructionContext</code> for the input buffer.\nCreates a new <code>InstructionContext</code> for the input buffer.\nReads the next account for the instruction.\nReturns the next account for the instruction.\nCurrent memory offset on the input buffer.\nReturns the program id for the instruction.\nReturns the program id for the instruction.\nRead an account from the input buffer.\nReturns the number of remaining accounts.\nNumber of remaining accounts.\nAn <code>Account</code> for CPI invocations.\nDescribes a single account read or written by a program …\nInformation about a CPI instruction.\nUse to query and convey information about the sibling …\nRepresents a signer seed.\nRepresents a program derived address (PDA) signer …\nThe pointers to the <code>AccountInfo</code> data are only valid for as …\nThe pointer to the seed bytes is only valid while the …\nThe pointer to the seeds is only valid while the …\nMetadata describing accounts that should be passed to the …\nNumber of AccountMeta structures\nData expected by the program instruction.\nLength of the instruction data\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates whether the account signed the instruction or …\nIndicates whether the account is writable or not.\nLength of the seed bytes.\nNumber of seeds.\nCreates a new <code>AccountMeta</code>.\nPublic key of the program.\nPublic key of the account.\nCreates a new readonly <code>AccountMeta</code>.\nCreates a new readonly and signer <code>AccountMeta</code>.\nSeed bytes.\nSigner seeds.\nCreates a new writable <code>AccountMeta</code>.\nCreates a new writable and signer <code>AccountMeta</code>.\nPrint a string to the log.\nPrint 64-bit values represented as hexadecimal to the log.\nPrint the remaining compute units available to the program.\nPrint some slices as base64.\nPrint the hexadecimal representation of the program’s …\nPrint the hexadecimal representation of a slice.\nCopies the contents of one value to another.\nLike C <code>memcmp</code>.\nLike C <code>memcpy</code>.\nLike C <code>memmove</code>.\nLike C <code>memset</code>.\nBuiltin value for <code>ProgramError::AccountAlreadyInitialized</code>.\nBuiltin value for <code>ProgramError::AccountBorrowFailed</code>.\nBuiltin value for <code>ProgramError::AccountDataTooSmall</code>.\nBuiltin value for <code>ProgramError::AccountNotRentExempt</code>.\nBuiltin value for <code>ProgramError::ArithmeticOverflow</code>.\nAn initialize instruction was sent to an account that has …\nFailed to borrow a reference to account data, already …\nAn account’s data was too small\nAn account does not have enough lamports to be rent-exempt\nProgram arithmetic overflowed\nBuiltin value for <code>ProgramError::BorshIoError</code>.\nBuiltin return values occupy the upper 32 bits\nBuiltin value for …\nIO Error\nBuiltin programs must consume compute units\nBuiltin value for <code>ProgramError::Custom(0)</code>.\nAllows on-chain programs to implement program-specific …\nBuiltin value for <code>ProgramError::IllegalOwner</code>.\nBuiltin value for <code>ProgramError::Immutable</code>.\nBuiltin value for <code>ProgramError::IncorrectAuthority</code>.\nBuiltin value for <code>ProgramError::IncorrectProgramId</code>.\nBuiltin value for <code>ProgramError::InsufficientFunds</code>.\nBuiltin value for <code>ProgramError::InvalidAccountData</code>.\nBuiltin value for <code>ProgramError::InvalidRealloc</code>.\nBuiltin value for <code>ProgramError::InvalidAccountOwner</code>.\nBuiltin value for <code>ProgramError::InvalidArgument</code>.\nBuiltin value for <code>ProgramError::InvalidInstructionData</code>.\nBuiltin value for <code>ProgramError::InvalidSeeds</code>.\nProvided owner is not allowed\nAccount is immutable\nIncorrect authority provided\nThe account did not have the expected program id\nAn account’s balance was too small to complete the …\nAn account’s data contents was invalid\nInvalid account owner\nThe arguments provided to a program instruction were …\nAn instruction’s data contents was invalid\nAccount data reallocation was invalid\nProvided seeds do not result in a valid address\nBuiltin value for …\nBuiltin value for …\nBuiltin value for <code>ProgramError::MaxSeedLengthExceeded</code>.\nBuiltin value for <code>ProgramError::MissingRequiredSignature</code>.\nAccounts data allocations exceeded the maximum allowed per …\nInstruction trace length exceeded the maximum allowed per …\nLength of the seed is too long for address generation\nA signature was required but not found\nBuiltin value for <code>ProgramError::NotEnoughAccountKeys</code>.\nThe instruction expected additional account keys\nReasons the program may fail.\nA trait for converting a program error to a <code>&amp;str</code>.\nBuiltin value for <code>ProgramError::UninitializedAccount</code>.\nBuiltin value for <code>ProgramError::UnsupportedSysvar</code>.\nAn attempt to operate on an account that hasn’t been …\nUnsupported sysvar\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMaximum number of seeds.\nmaximum length of derived <code>Pubkey</code> seed.\nNumber of bytes in a pubkey.\nThe address of a Solana account.\nCreate a valid program derived address without searching …\nCreate a valid program derived address without searching …\nFind a valid program derived address and its corresponding …\nLog a <code>Pubkey</code> from a program.\nFind a valid program derived address and its corresponding …\nSyscall function.\nSyscall function.\nSyscall function.\nSyscall function.\nSyscall function.\nSyscall function.\nSyscall function.\nSyscall function.\nSyscall function.\nSyscall function.\nSyscall function.\nSyscall function.\nSyscall function.\nSyscall function.\nSyscall function.\nSyscall function.\nSyscall function.\nSyscall function.\nSyscall function.\nSyscall function.\nSyscall function.\nSyscall function.\nSyscall function.\nSyscall function.\nSyscall function.\nSyscall function.\nSyscall function.\nSyscall function.\nSyscall function.\nSyscall function.\nSyscall function.\nSyscall function.\nSyscall function.\nSyscall function.\nSyscall function.\nSyscall function.\nSyscall function.\nSyscall function.\nSyscall function.\nSyscall function.\nA type that holds sysvar data.\nInformation about the network’s clock, ticks, slots, etc.\nCalculation of transaction fees.\nLoad the sysvar directly from the runtime.\nThis account contains the current cluster rent.\nThe ID of the clock sysvar.\nA representation of network time.\nThe expected duration of a slot (400 milliseconds).\nThe default tick rate that the cluster attempts to achieve …\nAt 160 ticks/s, 64 ticks per slot implies that leader …\nThe unit of time a given leader schedule is honored.\nThe length of the <code>Clock</code> sysvar account data.\nThe unit of time given to a leader for encoding a block.\nAn approximate measure of real-world time.\nThe current <code>Epoch</code>.\nThe timestamp of the first <code>Slot</code> in this <code>Epoch</code>.\nReturns the argument unchanged.\nReturn a <code>Clock</code> from the given account info.\nReturn a <code>Clock</code> from the given account info.\nReturn a <code>Clock</code> from the given bytes.\nReturn a <code>Clock</code> from the given bytes.\nCalls <code>U::from(self)</code>.\nThe future <code>Epoch</code> for which the leader schedule has most …\nThe current <code>Slot</code>.\nThe approximate real world time of the current slot.\nDefault percentage of fees to burn.\nDefault lamports per signature.\nDefault signatures per slot.\nFee calculator for processing transactions\nGoverns the fee rate for the cluster\nFees sysvar\nCalculate unburned fee from a fee total, returns …\nPercentage of fees to burn (0-100)\nCreate a new FeeCalculator based on current cluster …\nFee calculator for processing transactions\nFee rate governor\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe current cost of a signature in lamports. This amount …\nThe current cost of a signature\nMaximum lamports per signature\nMinimum lamports per signature\nCreate a new instance of the FeeCalculator\nCreate a new instance of the Fees sysvar\nThe target cost of a signature\nThe target number of signatures per slot\nSysvar1nstructions1111111111111111111111111\nThe bit positions for the signer flags in the <code>AccountMeta</code>.\nThe bit positions for the writable flags in the <code>AccountMeta</code>…\nCreates and returns an <code>IntrospectedInstruction</code> for the …\nAccount flags:\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the account meta at the specified index.\nGet the account meta at the specified index.\nGet the instruction data of the <code>Instruction</code>.\nCreates and returns an <code>IntrospectedInstruction</code> relative to …\nGet the program ID of the <code>Instruction</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicate whether the account is a signer or not.\nIndicate whether the account is writable or not.\nThe account key.\nLoad the current <code>Instruction</code>’s index in the currently …\nCreates and returns an <code>IntrospectedInstruction</code> for the …\nCreates a new <code>Instructions</code> struct.\nConvert the <code>IntrospectedAccountMeta</code> to an <code>AccountMeta</code>.\nAccount storage overhead for calculation of base rent.\nDefault percentage of collected rent that is burned.\nDefault amount of time (in years) the balance has to …\nDefault amount of time (in years) the balance has to …\nDefault rental rate in lamports/byte-year.\nUsed to indicate the account is rent exempt.\nThe <code>u64</code> representation of the default exemption threshold.\nThe length of the <code>Rent</code> sysvar account data.\nThe account owes this much rent.\nThe ID of the rent sysvar.\nRent sysvar data\nThe return value of <code>Rent::due</code>.\nBurn percentage\nCalculate how much rent to burn from the collected rent.\nRent due on account’s data length with balance.\nRent due for account that is known to be not exempt.\nExemption threshold in years\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn a <code>Rent</code> from the given account info.\nReturn a <code>Rent</code> from the given account info.\nReturn a <code>Rent</code> from the given bytes.\nReturn a <code>Rent</code> from the given bytes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines if the <code>exemption_threshold</code> is the default value.\nDetermines if an account can be considered rent exempt.\nReturn ‘true’ if rent exempt.\nReturn the lamports due for rent.\nRental rate in lamports per byte-year\nCalculates the minimum balance for rent exemption.")